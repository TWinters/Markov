package be.thomaswinters.markov.model.composite;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.lang.NotImplementedException;

import com.google.common.collect.ImmutableList;

import be.thomaswinters.markov.model.data.bags.Bag;
import be.thomaswinters.markov.model.data.element.IMarkovElement;
import be.thomaswinters.markov.model.data.ngram.CascadedNGram;
import be.thomaswinters.markov.model.data.ngram.INGram;
import be.thomaswinters.markov.model.generator.IMarkovGenerator;

/**
 * Returns the word generated by the first generator of the list that is able to
 * generate something.
 * 
 * @author Thomas Winters
 *
 */
public class MarkovGeneratorCascade<E,F> implements IMarkovGenerator<E,F>, Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 6752931012602758201L;
	private final ImmutableList<IMarkovGenerator<E,F>> generators;

	public MarkovGeneratorCascade(List<? extends IMarkovGenerator<E,F>> generators) {
		this.generators = ImmutableList.copyOf(generators);
	}

	@Override
	public Optional<IMarkovElement<E>> generateNextElement(List<E> currentText) {
		int index = 0;
		for (IMarkovGenerator<E,F> gen : generators) {
			Optional<IMarkovElement<E>> result = gen.generateNextElement(currentText);
			if (result.isPresent()) {
				System.out.println("last " + (generators.size() - index - 1) + "");
				return result;
			}
			index++;
		}
		return Optional.empty();
	}

	@Override
	public List<E> generateSequence() {
		throw new NotImplementedException();
	}

	@Override
	public List<E> generateSequence(List<E> initialSeed) {
		throw new NotImplementedException();
	}

	@Override
	public INGram<E,F> getNGram() {
		return new CascadedNGram<E,F>(generators.stream().map(e -> e.getNGram()).collect(Collectors.toList()));
	}

	@Override
	public Optional<Bag<IMarkovElement<E>>> getBag(List<E> current) {
		return generators.stream().filter(e -> e.getBag(current).isPresent()).map(e -> e.getBag(current).get()).findFirst();
	}

}
